# This patch file was generated by NetBeans IDE
# This patch can be applied using context Tools: Apply Diff Patch action on respective folder.
# It uses platform neutral UTF-8 encoding.
# Above lines and this line are ignored by the patching process.
1d0
< package shef.mt.aren;
14,33c13,26
<  *         FeatureExtractor extracts Glassbox and/or Blackbox features from a
<  *         pair of source-target input files and a set of additional resources
<  *         specified as input parameters Usage: FeatureExtractor -input
<  *         <source><target> -lang <source lang><target lang> -feat [list of
<  *         features] -mode [gb|bb|all] -gb [list of GB resources] -rebuild -log <br>
<  *         The valid arguments are:<br>
<  *         -help : print project help information<br>
<  *         -input <source file> <target file> <word alignment file>: the input source and target
<  *         files<br>
<  *         -lang <source language> <target language> : source and target
<  *         language<br>
<  *         -feat : the list of features. By default, all features corresponding
<  *         to the selected mode will be included<br>
<  *         -gb [list of files] input files required for computing the glassbox
<  *         features<br>
<  *         The arguments sent to the gb option depend on the MT system -mode
<  *         <GB|BB|ALL><br>
<  *         -rebuild : run all preprocessing tools<br>
<  *         -log : enable logging<br>
<  *         -config <config file> : use the configuration file <config file>
---
>  * FeatureExtractor extracts Glassbox and/or Blackbox features from a pair of
>  * source-target input files and a set of additional resources specified as
>  * input parameters Usage: FeatureExtractor -input <source><target> -lang
>  * <source lang><target lang> -feat [list of features] -mode [gb|bb|all] -gb
>  * [list of GB resources] -rebuild -log <br> The valid arguments are:<br> -help
>  * : print project help information<br> -input <source file> <target file> <word
>  * alignment file>: the input source and target files<br> -lang <source
>  * language> <target language> : source and target language<br> -feat : the list
>  * of features. By default, all features corresponding to the selected mode will
>  * be included<br> -gb [list of files] input files required for computing the
>  * glassbox features<br> The arguments sent to the gb option depend on the MT
>  * system -mode <GB|BB|ALL><br> -rebuild : run all preprocessing tools<br> -log
>  * : enable logging<br> -config <config file> : use the configuration file
>  * <config file>
36c29
<  * @author Catalina Hallett<br>
---
>  * @author Catalina Hallett & Mariano Felice<br>
37a31
> public class FeatureExtractorSimple {
39,40d32
< public class FeatureExtractor extends shef.mt.AbstractFeatureExtractor{
< 
46,52c38,53
< 	
< 	private String sourceFileMADA;
<         private String madaFile;
< 	private String nerSourceFile;
< 	private String nerSourceFile2;
< 	private String nerTargetFile;
< 		
---
>     /**
>      * path to the input folder
>      */
>     private static String input;
>     /**
>      * running mode: bb , gb or all
>      */
>     private String mod;
>     /**
>      * path to the output folder
>      */
>     private static String output;
>     private static String sourceFile;
>     private static String targetFile;
>     private static String sourceLang;
>     private static String targetLang;
67d67
< 	
77,78c77
< 	 * @param args
< 	 *            The list of arguments
---
>      * @param args The list of arguments
81,82c80,83
< 	public FeatureExtractor(String[] args) {
< 		super(args);
---
>     public FeatureExtractorSimple(String[] args) {
>         workDir = System.getProperty("user.dir");
>         new Logger("log.txt");
>         parseArguments(args);
83a85,88
>         input = workDir + File.separator + resourceManager.getString("input");
>         output = workDir + File.separator + resourceManager.getString("output");
>         System.out.println("input=" + input + "  output=" + output);
> 
88c93
< 		FeatureExtractor fe = new FeatureExtractor(args);
---
>         FeatureExtractorSimple fe = new FeatureExtractorSimple(args);
131,140d135
< 		Option ner = OptionBuilder
< 		.withArgName("ner")
< 		.withDescription("Named Entity files")
< 		.hasArgs(3).isRequired(false).create("ner");
< 		
< 		Option align = OptionBuilder
< 		.withArgName("align")
< 		.withDescription("Word alignment file")
< 		.hasArgs(1).isRequired(false).create("align");
< 		
162,163d156
< 		options.addOption(ner);
< 		options.addOption(align);
169,173c162,164
< 			if (line.hasOption("config")){
<                             setConfig(line.getOptionValue("config"));
<                             resourceManager = new PropertiesManager(getConfig());
< 			}
< 			else
---
>             if (line.hasOption("config")) {
>                 resourceManager = new PropertiesManager(line.getOptionValue("config"));
>             } else {
175,183d165
< 			
< 			
< 			if (line.hasOption("ner")) {
< 				// print the value of block-size
< 				String[] files = line.getOptionValues("ner");
< 				System.out.println(files[0]+" "+files[1]+" "+files[2]);
< 				nerSourceFile = files[0];
< 				nerSourceFile2 = files[1];
< 				nerTargetFile = files[2];
185a168
> 
189,190c172,173
< 				setSourceFile(files[0]);
< 				setTargetFile(files[1]);
---
>                 sourceFile = files[0];
>                 targetFile = files[1];
193,199d175
< 			if (line.hasOption("align")) {
< 				// print the value of block-size
< 				String[] files = line.getOptionValues("align");
< 				gizaAlignFile = files[0];
< 			}
< 
< 			
202,203c178,179
< 				setSourceLang(langs[0]);
< 				setTargetLang(langs[1]);
---
>                 sourceLang = langs[0];
>                 targetLang = langs[1];
205,206c181,182
< 				setSourceLang(resourceManager.getString("sourceLang.default"));
< 				setTargetLang (resourceManager.getString("targetLang.default"));
---
>                 sourceLang = resourceManager.getString("sourceLang.default");
>                 targetLang = resourceManager.getString("targetLang.default");
267,268c243,244
< 		String sourceOutput = runPOS(getSourceFile(), getSourceLang(), "source");
< 		String targetOutput = runPOS(getTargetFile(), getTargetLang(), "target");
---
>         String sourceOutput = runPOS(sourceFile, sourceLang, "source");
>         String targetOutput = runPOS(targetFile, targetLang, "target");
282c258
< 		String langResPath = getInput()  + File.separator + lang;
---
>         String langResPath = input + File.separator + lang;
309c285
< 	private void loadGiza() {
---
>     private static void loadGiza() {
311,312c287,288
< 		String gizaPath = resourceManager.getString("pair." + getSourceLang()
< 				+ getTargetLang() + ".giza.path");
---
>         String gizaPath = resourceManager.getString("pair." + sourceLang
>                 + targetLang + ".giza.path");
315,317d290
< 		String gizaPath2 = resourceManager.getString("pair." + getSourceLang()
< 				+ getTargetLang() + ".giza2.path");
< 		Giza2 giza2 = new Giza2(gizaPath2);
324c297
< 	private void runNGramPPL() {
---
>     private static void runNGramPPL() {
329,331c302,304
< 		File f = new File(getSourceFile());
< 		String sourceOutput = getInput()
< 				+ File.separator + getSourceLang() + File.separator + f.getName()
---
>         File f = new File(sourceFile);
>         String sourceOutput = input
>                 + File.separator + sourceLang + File.separator + f.getName()
333,335c306,308
< 		f = new File(getTargetFile());
< 		String targetOutput = getInput()
< 				+ File.separator + getTargetLang() + File.separator + f.getName()
---
>         f = new File(targetFile);
>         String targetOutput = input
>                 + File.separator + targetLang + File.separator + f.getName()
337,341c310,314
< 		nge.runNGramPerplex(getSourceFile(), sourceOutput,
< 				resourceManager.getString(getSourceLang() + ".lm"));
< 		System.out.println(resourceManager.getString(getTargetLang() + ".lm"));
< 		nge.runNGramPerplex(getTargetFile(), targetOutput,
< 				resourceManager.getString(getTargetLang() + ".lm"));
---
>         nge.runNGramPerplex(sourceFile, sourceOutput,
>                 resourceManager.getString(sourceLang + ".lm"));
>         System.out.println(resourceManager.getString(targetLang + ".lm"));
>         nge.runNGramPerplex(targetFile, targetOutput,
>                 resourceManager.getString(targetLang + ".lm"));
347,348c320
< 	 * with @seerunNGramPPL() but I separated them to make the code more
< 	 * readable
---
>      * with
349a322,323
>      * @seerunNGramPPL() but I separated them to make the code more readable
>      *
357,358c331,332
< 		String posTargetOutput = getInput()
< 				+ File.separator + getTargetLang() + File.separator + f.getName()
---
>         String posTargetOutput = input
>                 + File.separator + targetLang + File.separator + f.getName()
361c335
< 				resourceManager.getString(getTargetLang() + ".poslm"));
---
>                 resourceManager.getString(targetLang + ".poslm"));
378,379c352,356
< 	protected void preprocessing() {
< 		super.preprocessing();
---
>     private static void preprocessing() {
>         String sourceInputFolder = input + File.separator + sourceLang;
>         String targetInputFolder = input + File.separator + targetLang;
>         File origSourceFile = new File(sourceFile);
>         File inputSourceFile = new File(sourceInputFolder + File.separator + origSourceFile.getName());
381,486c358,361
<          //run MADA
<          File inputSourceFile = new File(getSourceFile());
<          File inputTargetFile = new File(getTargetFile());
<          MorphAnalyser mada = new MorphAnalyser(inputSourceFile.getPath(), resourceManager.getString("arabic.morphAnalyser.execPath"), resourceManager.getString("arabic.morphAnalyser.execName"), resourceManager.getString("arabic.morphAnalyser.config"), resourceManager.getString("arabic.sentId"),resourceManager.getString("arabic.morphAnalyser.export"), forceRun);
<          mada.run();
< //         sourceFileMADA = mada.getMadaTok();
<          setSourceFile(mada.getMadaTok());
<          madaFile = mada.getMadaOutput();
< 
<        
<          System.out.println("running Transliterator");
<          //run transliterator
<          String outTrans = inputSourceFile+".bw";
<          ArabicTransliterator trans = new ArabicTransliterator(inputSourceFile.getPath(), outTrans, resourceManager.getString("arabic.translit.path"), resourceManager.getString("arabic.translit.execName"), true);
<          trans.run();
<          System.out.println("running Arabic pos tagger");
<          //run pos tagger/tokenizer
<          //run arabic pos tagger
<          ArabicPosTagger aPosTag = new ArabicPosTagger("arabic","ArabicPosTagger",resourceManager.getString("arabic.postagger.execPath"), resourceManager.getString("arabic.postagger.execName"),outTrans);
<          ArabicPosTagger.ForceRun(forceRun);
<          aPosTag.run();
<   
<         //run English tokenizer
<          System.out.println("running tokenizer");
<          EnglishTokenizer enTok = new EnglishTokenizer(inputTargetFile.getPath(),inputTargetFile.getPath()+".tok", resourceManager.getString("english.lowercase"),resourceManager.getString("english.tokenizer"), "en",forceRun);
<          enTok.run();
<          setTargetFile(enTok.getTok());
<          System.out.println(getTargetFile());
<     }
< 
< 	private LanguageModel processNGrams() {
< 		// required by BB features 30-44
< 		NGramProcessor ngp = new NGramProcessor(resourceManager.getString(getSourceLang() + ".ngram"));
< 		return ngp.run();
< 	}
< 
< 	
< 
< 	public void runAll() {
< 		File f = new File(getSourceFile());
< 		String sourceFileName = f.getName();
< 		f = new File(getTargetFile());
< 		String targetFileName = f.getName();
< 
< 		String outputFileName = sourceFileName + "_to_" + targetFileName
< 				+ ".out";
< 
< 		String out = resourceManager.getString("output") + File.separator + getMod()
< 				+ outputFileName;
< 		System.out.println("Output will be: " + out);
< 
< 		
< 		MTOutputProcessor mtop = null;
< 
< 		if (gbMode == 1)
< 			gbXML = initialiseGBResources();
< 
< 		String nbestSentPath = resourceManager.getString("input")
< 				+ File.separator + getTargetLang() + File.separator + "temp";
< 		String ngramExecPath = resourceManager.getString("tools.ngram.path");
< 
< 		mtop = new MTOutputProcessor(gbXML, nbestSentPath, ngramExecPath,
< 				ngramSize);
< 		MorphAnalysisProcessor map = new MorphAnalysisProcessor(madaFile);
< 
< 		
< 		
< 		//shef.mt.features.coherence.Coherence coh = new shef.mt.features.coherence.Coherence(
< 		//		getTargetFile());
< 
< 		String pplSourcePath = resourceManager.getString("input")
< 				+ File.separator + getSourceLang() + File.separator + sourceFileName
< 				+ resourceManager.getString("tools.ngram.output.ext");
< 		String pplTargetPath = resourceManager.getString("input")
< 				+ File.separator + getTargetLang() + File.separator + targetFileName
< 				+ resourceManager.getString("tools.ngram.output.ext");
< 
< 		
< 		String pplPOSTargetPath = resourceManager.getString("input")
< 		+ File.separator + getTargetLang() + File.separator + targetFileName+PosTagger.getXPOS()
< 		+ resourceManager.getString("tools.ngram.output.ext");
< 		runNGramPPL();
< 
< 		// System.out.println(pplSourcePath+"\t"+pplTargetPath);
< 		PPLProcessor pplProcSource = new PPLProcessor(pplSourcePath,
< 				new String[] { "logprob", "ppl", "ppl1" });
< 		PPLProcessor pplProcTarget = new PPLProcessor(pplTargetPath,
< 				new String[] { "logprob", "ppl", "ppl1" });
< 
< 		FileModel fm = new FileModel(getSourceFile(),
< 				resourceManager.getString(getSourceLang() + ".corpus"));
< 		String sourcePosOutput = runPOS(
< 				getSourceFile().substring(0, getSourceFile().lastIndexOf(".")),
< 				getSourceLang(), "source");
< 
< 		String targetPosOutput = runPOS(getTargetFile(), getTargetLang(), "target");
< 
< 		String targetPPLPos = runNGramPPLPos(targetPosOutput+PosTagger.getXPOS());
< 		System.out.println("---------TARGET PPLPOS: "+targetPPLPos);
< 		PPLProcessor pplPosTarget = new PPLProcessor(targetPPLPos,
< 				new String[] { "poslogprob", "posppl", "posppl1" });
< 
< 		loadGiza();
< 		processNGrams();
< 
< 
---
>         System.out.println("source input:" + sourceFile);
>         System.out.println("target input:" + targetFile);
>         File origTargetFile = new File(targetFile);
>         File inputTargetFile = new File(targetInputFolder + File.separator + origTargetFile.getName());
488,504c363,368
< 			BufferedReader brSource = new BufferedReader(new FileReader(
< 					getSourceFile()));
< 			BufferedReader brTarget = new BufferedReader(new FileReader(
< 					getTargetFile()));
< 			BufferedWriter output = new BufferedWriter(new FileWriter(out));
< 			BufferedReader posSource = null;
< 			BufferedReader posTarget = null;
< 			boolean posSourceExists = ResourceManager
< 					.isRegistered("sourcePosTagger");
< 			boolean posTargetExists = ResourceManager
< 					.isRegistered("targetPosTagger");
< 			POSProcessor posSourceProc = null;
< 			POSProcessor posTargetProc = null;
< 			if (posSourceExists) {
< 				posSourceProc = new POSProcessor(sourcePosOutput);
< 				 posSource = new BufferedReader(new InputStreamReader(new
< 				 FileInputStream(sourcePosOutput), "utf-8"));
---
>             System.out.println("copying input to " + inputSourceFile.getPath());
>             copyFile(origSourceFile, inputSourceFile);
>             System.out.println("copying input to " + inputTargetFile.getPath());
>             copyFile(origTargetFile, inputTargetFile);
>         } catch (Exception e) {
>             e.printStackTrace();
506,511d369
< 			if (posTargetExists) {
< 				posTargetProc = new POSProcessor(targetPosOutput);
< 				 posTarget = new BufferedReader(new InputStreamReader(new
< 				 FileInputStream(targetPosOutput)));
< 			}
< 			ResourceManager.printResources();
513,524c371,372
< 			Sentence targetSent;
< 			// HACK
< 			Sentence sourceSent;
< 			int sentCount = 0;
< 			// HACK
< 			String lineSource = brSource.readLine();
< 			String lineTarget = brTarget.readLine();
< 			// HACK
< 			int result;
< 			WordAlign gizaAlign = new WordAlign(gizaAlignFile);
< 			StanfordLexicalisedParser stfLPSource = new StanfordLexicalisedParser(getSourceFile(),resourceManager.getString(getSourceLang()+".stf.grammar"),getSourceLang());
< 			StanfordLexicalisedParser stfLPTarget = new StanfordLexicalisedParser(getTargetFile(),resourceManager.getString(getTargetLang()+".stf.grammar"),getTargetLang());
---
>         //run tokenizer for source (English)
>         System.out.println("running tokenizer");
525a374,376
>         String truecasePath = "";
>         truecasePath = resourceManager.getString("english.truecase") + "|" + resourceManager.getString("english.truecase.model");
>         Tokenizer enTok = new Tokenizer(inputSourceFile.getPath(), inputSourceFile.getPath() + ".tok", truecasePath, resourceManager.getString("english.tokenizer"), "en", forceRun);
527,534d377
< 			StfParseReader stfParseTarget = new StfParseReader(stfLPTarget.getOutput());
< 			StfParseReader stfParseSource = new StfParseReader(stfLPSource.getOutput());
< 			System.out.println("-----------------------------------");			
< 			NERProcessor nerSource= new NERProcessor(nerSourceFile, new String[]{"person","organization","location","ner","PERSON","LOCATION","ORGANIZATION"});
< 			NERProcessor nerSource2= new NERProcessor(nerSourceFile2, new String[]{"person2","organization2","location2","ner2","PER","LOC","ORG"});
< 			NERProcessor nerTarget = new NERProcessor(nerTargetFile,new String[]{"person","organization","location","ner","PERSON","LOCATION","ORGANIZATION"});
< 			System.out.println("-----------------------------------");
< 			while ((lineSource != null)	&& (lineTarget != null)) {
536,541c379,382
< 	//the MADA-tokenised files contain start each sentence with the setence ID. We put it there (why?) - no we've got to remove it
<                             lineSource = lineSource.trim().substring(lineSource.indexOf(" ")).replace("+", "");
< 				sourceSent = new Sentence(lineSource,
< 						sentCount);
< 				targetSent = new Sentence(lineTarget, sentCount);
< 				System.out.println("Processing sentence "+sentCount);
---
>         // Tokenizer enTok = new Tokenizer(inputSourceFile.getPath(), inputSourceFile.getPath() + ".tok", resourceManager.getString("english.lowercase"), resourceManager.getString("english.tokenizer"), "en", forceRun);
>         enTok.run();
>         sourceFile = enTok.getTok();
>         System.out.println(sourceFile);
543c384,386
< 				WordAlign.processNextSentence(sourceSent, targetSent);
---
>         //run tokenizer for target (Spanish)
>         System.out.println("running tokenizer");
> //        Tokenizer esTok = new Tokenizer(inputTargetFile.getPath(), inputTargetFile.getPath() + ".tok", resourceManager.getString("spanish.lowercase"), resourceManager.getString("spanish.tokenizer"), "es", forceRun);
545,546c388,389
< 				if (stfParseSource.isAvailable())
< 				stfParseSource.processNextSentence(sourceSent);
---
>          truecasePath = resourceManager.getString("spanish.truecase") + "|" + resourceManager.getString("spanish.truecase.model");
>          Tokenizer esTok = new Tokenizer(inputTargetFile.getPath(),inputTargetFile.getPath()+".tok", truecasePath,resourceManager.getString("spanish.tokenizer"), "es", forceRun);
548,549c391,393
< 				if (stfParseTarget.isAvailable())
< 				stfParseTarget.processNextSentence(targetSent);
---
>         esTok.run();
>         targetFile = esTok.getTok();
>         System.out.println(targetFile);
551c395,396
< 				if (posSourceExists) {
---
>         // Normalize files to avoid strange characters in UTF-8 that may break the PoS tagger
>         //normalize_utf8();
553,554d397
< 					posSourceProc.processSentence(sourceSent);
< 
556d398
< 				if (posTargetExists) {
558c400,404
< 					posTargetProc.processSentence(targetSent);
---
>     private static LanguageModel processNGrams() {
>         // required by BB features 30-44
>         NGramProcessor ngp = new NGramProcessor(
>                 resourceManager.getString(sourceLang + ".ngram"));
>         return ngp.run();
561,609d406
< 				
< 				sourceSent.computeNGrams(3);
< 				targetSent.computeNGrams(3);
< 
< 				pplProcSource.processNextSentence(sourceSent);
< 
< 				pplProcTarget.processNextSentence(targetSent);
< 
< 				pplPosTarget.processNextSentence(targetSent);
< 
< //				coh.processNextSentence(targetSent);
< 
< 				nerSource.processNextSentence(sourceSent);
< 
< 				nerSource2.processNextSentence(sourceSent);
< 
< 				nerTarget.processNextSentence(targetSent);
< 				
<                 map.processNextSentence(sourceSent);
< 				mtop.processNextSentence(sourceSent);
< 
< 				++sentCount;
< 				output.write(featureManager.runFeatures(sourceSent, targetSent));
< 				output.write("\r\n");
< 				
< 				 lineSource = brSource.readLine();
< 				lineTarget = brTarget.readLine();
< 			
< 			}
< 	//		featureManager.printFeatureIndeces();
< 			if (posSource != null) {
< 				posSource.close();
< 			}
< 			if (posTarget != null) {
< 				posTarget.close();
< 			}
< 
< 			brSource.close();
< 			brTarget.close();
< 			output.close();
< 			stfParseSource.close();
< 			stfParseTarget.close();
< 			Logger.close();
< 		} catch (Exception e) {
< 			e.printStackTrace();
< 		}
< 
< 	}
< 
621,622c418,449
< 		super.constructFolders();
< 		File f = new File(getInput() + File.separator + "systems" + File.separator
---
> 
>         File f = new File(input);
>         if (!f.exists()) {
>             f.mkdir();
>             System.out.println("folder created " + f.getPath());
>         }
> 
> 
>         f = new File(input + File.separator + sourceLang);
>         if (!f.exists()) {
>             f.mkdir();
>             System.out.println("folder created " + f.getPath());
>         }
>         f = new File(input + File.separator + targetLang);
>         if (!f.exists()) {
>             f.mkdir();
>             System.out.println("folder created " + f.getPath());
>         }
>         f = new File(input + File.separator + targetLang + File.separator
>                 + "temp");
>         if (!f.exists()) {
>             f.mkdir();
>             System.out.println("folder created " + f.getPath());
>         }
> 
>         f = new File(input + File.separator + "systems");
>         if (!f.exists()) {
>             f.mkdir();
>             System.out.println("folder created " + f.getPath());
>         }
> 
>         f = new File(input + File.separator + "systems" + File.separator
629c456
< 		f = new File(getInput() + File.separator + "systems" + File.separator
---
>         f = new File(input + File.separator + "systems" + File.separator
635a463,467
>         String output = resourceManager.getString("output");
>         f = new File(output);
>         if (!f.exists()) {
>             f.mkdir();
>             System.out.println("folder created " + f.getPath());
636a469
>     }
639,642c472,474
< 	 * identifies which MT system is used and constructs the xml file that
< 	 * describes the features specific to a particular MT system
< 	 * 
< 	 * @return the path to the XML file
---
>      * Runs the Feature Extractor<br> <ul> <li>constructs the required folders
>      * <li>runs the pre-processing tools <li>runs the BB features, GB features
>      * or both according to the command line parameters </ul>
676c508
< 		File f = new File(getSourceFile());
---
>         File f = new File(sourceFile);
678c510
< 		f = new File(getTargetFile());
---
>         f = new File(targetFile);
680d511
< 
683,685c514
< 
< 		String out = resourceManager.getString("output") + File.separator + getMod()
< 				+ outputFileName;
---
>         String out = resourceManager.getString("output") + File.separator + outputFileName;
688,690d516
< 	//	shef.mt.features.coherence.Coherence coh = new shef.mt.features.coherence.Coherence(
< 	//			getTargetFile());
< 
692c518
< 				+ File.separator + getSourceLang() + File.separator + sourceFileName
---
>                 + File.separator + sourceLang + File.separator + sourceFileName
695c521
< 				+ File.separator + getTargetLang() + File.separator + targetFileName
---
>                 + File.separator + targetLang + File.separator + targetFileName
700c526
< 		+ File.separator + getTargetLang() + File.separator + targetFileName+PosTagger.getXPOS()
---
>                 + File.separator + targetLang + File.separator + targetFileName + PosTagger.getXPOS()
704d529
< 		// System.out.println(pplSourcePath+"\t"+pplTargetPath);
706c531
< 				new String[] { "logprob", "ppl", "ppl1" });
---
>                 new String[]{"logprob", "ppl", "ppl1"});
708c533
< 				new String[] { "logprob", "ppl", "ppl1" });
---
>                 new String[]{"logprob", "ppl", "ppl1"});
710,714c535,538
< 		FileModel fm = new FileModel(getSourceFile(),
< 				resourceManager.getString(getSourceLang() + ".corpus"));
< 		String sourcePosOutput = runPOS(
< 				getSourceFile().substring(0, getSourceFile().lastIndexOf(".")),
< 				getSourceLang(), "source");
---
>         FileModel fm = new FileModel(sourceFile,
>                 resourceManager.getString(sourceLang + ".corpus"));
>         String sourcePosOutput = runPOS(sourceFile, sourceLang, "source");
>         String targetPosOutput = runPOS(targetFile, targetLang, "target");
716,719c540,541
< 		String targetPosOutput = runPOS(getTargetFile(), getTargetLang(), "target");
< 
< 		String targetPPLPos = runNGramPPLPos(targetPosOutput+PosTagger.getXPOS());
< 		System.out.println("---------TARGET PPLPOS: "+targetPPLPos);
---
>         String targetPPLPos = runNGramPPLPos(targetPosOutput + PosTagger.getXPOS());
>         System.out.println("---------TARGET PPLPOS: " + targetPPLPos);
721c543
< 				new String[] { "poslogprob", "posppl", "posppl1" });
---
>                 new String[]{"poslogprob", "posppl", "posppl1"});
726d547
< 
729c550
< 					getSourceFile()));
---
>                     sourceFile));
731c552
< 					getTargetFile()));
---
>                     targetFile));
740a562,593
>             
>             
>             
>              
>           
>             //lefterav: Berkeley parser modifications start here
>             //Check if user has defined the grammar files for source 
>             //and target language
> 
>            //   if ( ResourceManager.isRegistered("BParser")){   
>             
>             BParserProcessor sourceParserProcessor = new BParserProcessor();
>             sourceParserProcessor.initialize(sourceFile, resourceManager, sourceLang);
>             BParserProcessor targetParserProcessor = new BParserProcessor();
>             targetParserProcessor.initialize(targetFile, resourceManager, targetLang);   
>             
>    // } 
>     
>     
>      /**
>             * BEGIN: Added by Raphael Rubino for the Topic Model Features
> 	    */
>           
>             String sourceTopicDistributionFile = resourceManager.getString(sourceLang + ".topic.distribution");
>             String targetTopicDistributionFile = resourceManager.getString(targetLang + ".topic.distribution");
>             TopicDistributionProcessor sourceTopicDistributionProcessor = new TopicDistributionProcessor(sourceTopicDistributionFile, "sourceTopicDistribution");
>             TopicDistributionProcessor targetTopicDistributionProcessor = new TopicDistributionProcessor(targetTopicDistributionFile, "targetTopicDistribution");
>             
>             
>             /* END: Added by Raphael Rubino for the Topic Model Features
>             */ 
>     
743,744c596
< 				 posSource = new BufferedReader(new InputStreamReader(new
< 				 FileInputStream(sourcePosOutput), "utf-8"));
---
>                 posSource = new BufferedReader(new InputStreamReader(new FileInputStream(sourcePosOutput), "utf-8"));
748,749c600
< 				 posTarget = new BufferedReader(new InputStreamReader(new
< 				 FileInputStream(targetPosOutput)));
---
>                 posTarget = new BufferedReader(new InputStreamReader(new FileInputStream(targetPosOutput)));
752,753d602
< 
< 			Sentence targetSent;
754a604
>             Sentence targetSent;
760,761d609
< 			int result;
< 			WordAlign gizaAlign = new WordAlign(gizaAlignFile);
763,764d610
< 			StanfordLexicalisedParser stfLPSource = new StanfordLexicalisedParser(getSourceFile(),resourceManager.getString(getSourceLang()+".stf.grammar"),getSourceLang());
< 			StanfordLexicalisedParser stfLPTarget = new StanfordLexicalisedParser(getTargetFile(),resourceManager.getString(getTargetLang()+".stf.grammar"),getTargetLang());
767,768d612
< 			StfParseReader stfParseTarget = new StfParseReader(stfLPTarget.getOutput());
< 			StfParseReader stfParseSource = new StfParseReader(stfLPSource.getOutput());
770,775d613
< 			System.out.println("-----------------------------------");			
< 			NERProcessor nerSource= new NERProcessor(nerSourceFile, new String[]{"person","organization","location","ner","PERSON","LOCATION","ORGANIZATION"});
< 			NERProcessor nerSource2= new NERProcessor(nerSourceFile2, new String[]{"person2","organization2","location2","ner2","PER","LOC","ORG"});
< 			NERProcessor nerTarget = new NERProcessor(nerTargetFile,new String[]{"person","organization","location","ner","PERSON","LOCATION","ORGANIZATION"});
< 			System.out.println("-----------------------------------");
< 			while ((lineSource != null)	&& (lineTarget != null)) {
777,780c615,623
< 	//the MADA-tokenised files contain start each sentence with the setence ID. We put it there (why?) - no we've got to remove it
<                             lineSource = lineSource.trim().substring(lineSource.indexOf(" ")).replace("+", "");
< 				sourceSent = new Sentence(lineSource,
< 						sentCount);
---
> 
>             //read in each line from the source and target files
>             //create a sentence from each
>             //process each sentence
>             //run the features on the sentences
>             while ((lineSource != null) && (lineTarget != null)) {
> 
>                 //lineSource = lineSource.trim().substring(lineSource.indexOf(" ")).replace("+", "");
>                 sourceSent = new Sentence(lineSource, sentCount);
781a625
> 
782a627,628
>                 System.out.println("SORCE: " + sourceSent.getText());
>                 System.out.println("TARGET: " + targetSent.getText());
784d629
< 				WordAlign.processNextSentence(sourceSent, targetSent);
786,787d630
< 				if (stfParseSource.isAvailable())
< 				stfParseSource.processNextSentence(sourceSent);
789,790d631
< 				if (stfParseTarget.isAvailable())
< 				stfParseTarget.processNextSentence(targetSent);
792c633
< 				if (posSourceExists)
---
>                 if (posSourceExists) {
794c635,636
< 				if (posTargetExists)
---
>                 }
>                 if (posTargetExists) {
796,797c638
< 
< 				
---
>                 }
800d640
< 
804d643
< 		//		coh.processNextSentence(targetSent);
806,808c645,647
< 				nerSource.processNextSentence(sourceSent);
< 				nerSource2.processNextSentence(sourceSent);
< 				nerTarget.processNextSentence(targetSent);
---
>                    //lefterav: Parse code here
>                  sourceParserProcessor.processNextSentence(sourceSent);
>             	targetParserProcessor.processNextSentence(targetSent);
809a649,652
>                 
>                 sourceTopicDistributionProcessor.processNextSentence(sourceSent);
>                  targetTopicDistributionProcessor.processNextSentence(targetSent);
>                 
812,813c655
< 				output.write("\r\n");
< 				
---
>                 output.newLine();
816d657
< 			
818d658
< 	//		featureManager.printFeatureIndeces();
829,830d668
< 			stfParseSource.close();
< 			stfParseTarget.close();
839a678,686
>     private static void copyFile(File sourceFile, File destFile)
>             throws IOException {
>         if (sourceFile.equals(destFile)) {
>             System.out.println("source=dest");
>             return;
>         }
>         if (!destFile.exists()) {
>             destFile.createNewFile();
>         }
873,901c720,725
< 			BufferedReader brSource = new BufferedReader(new FileReader(
< 					getSourceFile()));
< 			BufferedReader brTarget = new BufferedReader(new FileReader(
< 					getTargetFile()));
< 			BufferedWriter output = new BufferedWriter(new FileWriter(out));
< 
< 			ResourceManager.printResources();
< 
< 			Sentence targetSent;
< 			Sentence sourceSent;
< 			int sentCount = 0;
< 
< 			String lineSource;
< 
< 			while (((lineSource = brSource.readLine()) != null)
< 					&& ((lineTarget = brTarget.readLine()) != null)) {
< 
< 				lineSource = lineSource.trim().substring(lineSource.indexOf(" "));
< 				sourceSent = new Sentence(lineSource,
< 						sentCount);
< 				targetSent = new Sentence(lineTarget, sentCount);
< 
<                 map.processNextSentence(sourceSent);
< 				mtop.processNextSentence(sourceSent);
< 
< 				++sentCount;
< 				output.write(featureManager.runFeatures(sourceSent, targetSent));
< 				output.write("\r\n");
< 
---
>             source = new FileInputStream(sourceFile).getChannel();
>             destination = new FileOutputStream(destFile).getChannel();
>             destination.transferFrom(source, 0, source.size());
>         } finally {
>             if (source != null) {
>                 source.close();
903,909c727,728
< 			brSource.close();
< 			brTarget.close();
< 			output.close();
< 			featureManager.printFeatureIndeces();
< 			Logger.close();
< 		} catch (Exception e) {
< 			e.printStackTrace();
---
>             if (destination != null) {
>                 destination.close();
911a731
>     }
912a733,739
>     /**
>      * returns the working mode: bb, gb or all
>      *
>      * @return the working mode
>      */
>     public String getMod() {
>         return mod;
913a741,750
> 
>     /**
>      * sets the working mode
>      *
>      * @param mod the working mode. Valid values are bb, gb and all
>      */
>     public void setMod(String mod) {
>         this.mod = mod;
>     }
> }
